<body xmlns="http://www.w3.org/1999/xhtml" id="partsOfAnXPath.xml-d1e1">
   <span class="xmldoc">&lt;mtx:sc xml:id=d1e1&gt;</span>
  <h2 id="partsOfAnXPath.xml-d1e3">
      <span class="xmldoc">&lt;mtx:rh xml:id=d1e3&gt;</span>The Parts of an XPath<span class="xmldoc">&lt;/mtx:rh&gt;</span>
   </h2>
  <div id="partsOfAnXPath.xml-d1e6">
      <span class="xmldoc">&lt;mtx:ti xml:id=d1e6&gt;</span>
      <h3 id="partsOfAnXPath.xml-d1e8">
         <span class="xmldoc">&lt;mtx:rh xml:id=d1e8&gt;</span>Steps<span class="xmldoc">&lt;/mtx:rh&gt;</span>
      </h3>
      <p id="partsOfAnXPath.xml-d1e11">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e11&gt;</span>When building an XPath, you might need to specify one or more locations 
      within an XML document. To do this, use "/" to indicate that you are 
      making a step along the tree. Your results will be gathered from only the
      node on the last step you make.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e14">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e14&gt;</span>For example, in the XPath <code id="partsOfAnXPath.xml-d1e16">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e16&gt;</span>/TEI/teiHeader<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>, we make our
      first step to <code id="partsOfAnXPath.xml-d1e19">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e19&gt;</span>&lt;TEI&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>, the <span id="partsOfAnXPath.xml-d1e22" class="emph">
            <span class="xmldoc">&lt;mtx:pd xml:id=d1e22&gt;</span>root node<span class="xmldoc">&lt;/mtx:pd&gt;</span>
         </span> of the 
      document. Next, we step to <code id="partsOfAnXPath.xml-d1e25">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e25&gt;</span>&lt;teiHeader&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>, which is a 
      child of the TEI node. Note that while we used the "TEI" node as a 
      stepping stone, only matching "teiHeader" nodes will be returned.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <span class="xmldoc">&lt;/mtx:ti&gt;</span>
   </div>
  <div id="partsOfAnXPath.xml-d1e30">
      <span class="xmldoc">&lt;mtx:ti xml:id=d1e30&gt;</span>
      <h3 id="partsOfAnXPath.xml-d1e32">
         <span class="xmldoc">&lt;mtx:rh xml:id=d1e32&gt;</span>Node Tests<span class="xmldoc">&lt;/mtx:rh&gt;</span>
      </h3>
      <p id="partsOfAnXPath.xml-d1e35">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e35&gt;</span>Once you make a step into a document's node, you'll want to decide 
      whether or not it meets your search criteria. You can accomplish this
      with node tests.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e38">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e38&gt;</span>The most basic node test is the name test. We have already seen an 
      example of this in <code id="partsOfAnXPath.xml-d1e40">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e40&gt;</span>/TEI/teiHeader<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>. We specifically want
      to match root nodes with the name "TEI", as opposed to "HTML" or 
      "MODS". Similarly, we want <code id="partsOfAnXPath.xml-d1e43">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e43&gt;</span>&lt;TEI&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>'s child 
      <code id="partsOfAnXPath.xml-d1e46">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e46&gt;</span>&lt;teiHeader&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>, not its child <code id="partsOfAnXPath.xml-d1e49">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e49&gt;</span>&lt;text&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>
         <span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <div id="partsOfAnXPath.xml-d1e52">
         <span class="xmldoc">&lt;mtx:ti xml:id=d1e52&gt;</span>
         <h4 id="partsOfAnXPath.xml-d1e54">
            <span class="xmldoc">&lt;mtx:rh xml:id=d1e54&gt;</span>Axes<span class="xmldoc">&lt;/mtx:rh&gt;</span>
         </h4>
         <p id="partsOfAnXPath.xml-d1e57">
            <span class="xmldoc">&lt;mtx:cr xml:id=d1e57&gt;</span>An axis is used to specify a node's relationship to another node. 
        Axes are optional, but powerful tools in XPath; they allow your next 
        step to reach any other node on the tree. There are a 13 types of 
        axes relationships, such as "parent" or "descendant". To use them, 
        preface the node name with an axis relationship and the characters 
        "::".<span class="xmldoc">&lt;/mtx:cr&gt;</span>
         </p>
         <div id="partsOfAnXPath.xml-d1e60" class="popout">
            <span class="xmldoc">&lt;mtx:ir xml:id=d1e60&gt;</span>
            <h3 id="partsOfAnXPath.xml-d1e62">
               <span class="xmldoc">&lt;mtx:rh xml:id=d1e62&gt;</span>Shortcuts!<span class="xmldoc">&lt;/mtx:rh&gt;</span>
            </h3>
            <p id="partsOfAnXPath.xml-d1e65">
               <span class="xmldoc">&lt;mtx:cr xml:id=d1e65&gt;</span>
               <code id="partsOfAnXPath.xml-d1e66">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e66&gt;</span>//<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code> is short for <code id="partsOfAnXPath.xml-d1e69">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e69&gt;</span>/descendant-or-self::<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>.
          It tells the XPath processor that you want to find the next node 
          no matter how far down the XML tree it is!<span class="xmldoc">&lt;/mtx:cr&gt;</span>
            </p>
            <p id="partsOfAnXPath.xml-d1e73">
               <span class="xmldoc">&lt;mtx:cr xml:id=d1e73&gt;</span>
               <code id="partsOfAnXPath.xml-d1e74">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e74&gt;</span>.<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code> is short for <code id="partsOfAnXPath.xml-d1e77">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e77&gt;</span>self::node()<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>. It selects 
          the node at the current step you're on. This becomes especially 
          useful when using predicates (described below).<span class="xmldoc">&lt;/mtx:cr&gt;</span>
            </p>
            <p id="partsOfAnXPath.xml-d1e81">
               <span class="xmldoc">&lt;mtx:cr xml:id=d1e81&gt;</span>
               <code id="partsOfAnXPath.xml-d1e82">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e82&gt;</span>..<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code> is similarly short for <code id="partsOfAnXPath.xml-d1e85">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e85&gt;</span>parent::node()<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>. 
          If you need to match a parent node without knowing exactly what it's 
          named, you could just write out <code id="partsOfAnXPath.xml-d1e88">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e88&gt;</span>//author/..<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
            </p>
            <span class="xmldoc">&lt;/mtx:ir&gt;</span>
         </div>
         <p id="partsOfAnXPath.xml-d1e93">
            <span class="xmldoc">&lt;mtx:cr xml:id=d1e93&gt;</span>Let's say we want to rewrite our previous example to use our 
        knowledge of axes. Because we want the child of 
        <code id="partsOfAnXPath.xml-d1e95">
               <span class="xmldoc">&lt;mtx:fe xml:id=d1e95&gt;</span>&lt;TEI&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
            </code> with the name "teiHeader", we could use the
        XPath <code id="partsOfAnXPath.xml-d1e98">
               <span class="xmldoc">&lt;mtx:fe xml:id=d1e98&gt;</span>/TEI/child::teiHeader<span class="xmldoc">&lt;/mtx:fe&gt;</span>
            </code> to accomplish the same thing,
        only with more typing! The "child::" axis is the default, which is why 
        we didn't need to add it to our original example.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
         </p>
         <p id="partsOfAnXPath.xml-d1e102">
            <span class="xmldoc">&lt;mtx:cr xml:id=d1e102&gt;</span>It's worth noting that you can absolutely go <span id="partsOfAnXPath.xml-d1e104" class="emph">
               <span class="xmldoc">&lt;mtx:pd xml:id=d1e104&gt;</span>up<span class="xmldoc">&lt;/mtx:pd&gt;</span>
            </span> the XML tree, 
        not just down. <code id="partsOfAnXPath.xml-d1e107">
               <span class="xmldoc">&lt;mtx:fe xml:id=d1e107&gt;</span>//author/ancestor::teiHeader<span class="xmldoc">&lt;/mtx:fe&gt;</span>
            </code>, for example.
        This XPath finds all "author" nodes first, and tries to match a 
        <code id="partsOfAnXPath.xml-d1e110">
               <span class="xmldoc">&lt;mtx:fe xml:id=d1e110&gt;</span>&lt;teiHeader&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
            </code> ancestor.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
         </p>
         <span class="xmldoc">&lt;/mtx:ti&gt;</span>
      </div>
      <span class="xmldoc">&lt;/mtx:ti&gt;</span>
   </div>
  <div id="partsOfAnXPath.xml-d1e116">
      <span class="xmldoc">&lt;mtx:ti xml:id=d1e116&gt;</span>
      <h3 id="partsOfAnXPath.xml-d1e118">
         <span class="xmldoc">&lt;mtx:rh xml:id=d1e118&gt;</span>Predicates<span class="xmldoc">&lt;/mtx:rh&gt;</span>
      </h3>
      <p id="partsOfAnXPath.xml-d1e121">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e121&gt;</span>Predicates are another way you can limit your XPath's results. 
      Predicates come at the end of a node test, set off by square brackets "[" 
      and "]". Inside those brackets, you place a qualifying test. You might 
      find it helpful to think of predicates as a true-or-false (aka boolean) 
      test on the node you select.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e124">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e124&gt;</span>Let's return to <code id="partsOfAnXPath.xml-d1e126">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e126&gt;</span>//author/ancestor::teiHeader<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>. There is only 
      ever one <code id="partsOfAnXPath.xml-d1e129">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e129&gt;</span>&lt;teiHeader&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code> in TEI documents, so our results 
      will always be either one "teiHeader" node (if at least one 
      <code id="partsOfAnXPath.xml-d1e132">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e132&gt;</span>&lt;author&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code> has it as an ancestor), or none (if author 
      has no ancestors whose names are "teiHeader").<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e136">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e136&gt;</span>We can simplify this XPath with predicates. We know we want the result 
      to be the node named "teiHeader", so we start our XPath: 
      <code id="partsOfAnXPath.xml-d1e138">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e138&gt;</span>//teiHeader<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e142">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e142&gt;</span>Now, we only want <code id="partsOfAnXPath.xml-d1e144">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e144&gt;</span>&lt;teiHeader&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code> where the node test 
      <code id="partsOfAnXPath.xml-d1e147">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e147&gt;</span>descendant::author<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code> is true. If we use location steps, our 
      results will show every author descendant, not the teiHeader itself.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e152">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e152&gt;</span>Instead, we place the node test within a predicate: 
      <code id="partsOfAnXPath.xml-d1e154">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e154&gt;</span>//teiHeader[descendant::author]<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>. This roughly translates to, 
      "Give me any node named "teiHeader", but only <span id="partsOfAnXPath.xml-d1e157" class="emph">
            <span class="xmldoc">&lt;mtx:pd xml:id=d1e157&gt;</span>when at least one 
      <code id="partsOfAnXPath.xml-d1e159">
               <span class="xmldoc">&lt;mtx:fe xml:id=d1e159&gt;</span>&lt;author&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
            </code> is its a descendant<span class="xmldoc">&lt;/mtx:pd&gt;</span>
         </span>".<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <span class="xmldoc">&lt;/mtx:ti&gt;</span>
   </div>
  <div id="partsOfAnXPath.xml-d1e165">
      <span class="xmldoc">&lt;mtx:ti xml:id=d1e165&gt;</span>
      <h3 id="partsOfAnXPath.xml-d1e167">
         <span class="xmldoc">&lt;mtx:rh xml:id=d1e167&gt;</span>Comparisons<span class="xmldoc">&lt;/mtx:rh&gt;</span>
      </h3>
      <p id="partsOfAnXPath.xml-d1e170">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e170&gt;</span>XPath can also compare text, numbers, and nodes. These operations 
      correspond to basic arithmetic signs, Boolean operators, and set theory 
      notations. Here are some operators you can use:<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <div id="partsOfAnXPath.xml-d1e173">
         <span class="xmldoc">&lt;mtx:ne xml:id=d1e173&gt;</span>
         <ul>
            <li id="partsOfAnXPath.xml-d1e175">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e175&gt;</span>
               <span id="partsOfAnXPath.xml-d1e176" class="emph">
                  <span class="xmldoc">&lt;mtx:pd xml:id=d1e176&gt;</span>or, and<span class="xmldoc">&lt;/mtx:pd&gt;</span>
               </span>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e179">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e179&gt;</span>
               <span id="partsOfAnXPath.xml-d1e180" class="emph">
                  <span class="xmldoc">&lt;mtx:pd xml:id=d1e180&gt;</span>=, !=, &lt;, &gt;, &lt;=, &gt;=<span class="xmldoc">&lt;/mtx:pd&gt;</span>
               </span>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e183">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e183&gt;</span>
               <span id="partsOfAnXPath.xml-d1e184" class="emph">
                  <span class="xmldoc">&lt;mtx:pd xml:id=d1e184&gt;</span>+, -<span class="xmldoc">&lt;/mtx:pd&gt;</span>
               </span>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e187">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e187&gt;</span>
               <span id="partsOfAnXPath.xml-d1e188" class="emph">
                  <span class="xmldoc">&lt;mtx:pd xml:id=d1e188&gt;</span>*, div, mod<span class="xmldoc">&lt;/mtx:pd&gt;</span>
               </span>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e191">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e191&gt;</span>
               <span id="partsOfAnXPath.xml-d1e192" class="emph">
                  <span class="xmldoc">&lt;mtx:pd xml:id=d1e192&gt;</span>|<span class="xmldoc">&lt;/mtx:pd&gt;</span>
               </span>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <span class="xmldoc">&lt;/mtx:ne&gt;</span>
      </div>
      <p id="partsOfAnXPath.xml-d1e196">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e196&gt;</span>If we wanted to find this node 
      <code id="partsOfAnXPath.xml-d1e198">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e198&gt;</span>&lt;author&gt;Bradbury, Ray&lt;author/&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>, we could use the 
      XPath <code id="partsOfAnXPath.xml-d1e201">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e201&gt;</span>//author[.='Bradbury, Ray']<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code> to find it. The "." says 
      that we're using the current node context (a child of a node named 
      "author"). Since the text() node within our above 
      <code id="partsOfAnXPath.xml-d1e204">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e204&gt;</span>&lt;author&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code> exactly equals "Bradbury, Ray", the predicate 
      evaluates to "true" and we retrieve the correct results.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <div id="partsOfAnXPath.xml-d1e208" class="popout">
         <span class="xmldoc">&lt;mtx:ir xml:id=d1e208&gt;</span>
         <h3 id="partsOfAnXPath.xml-d1e210">
            <span class="xmldoc">&lt;mtx:rh xml:id=d1e210&gt;</span>A Little Mathe-magic<span class="xmldoc">&lt;/mtx:rh&gt;</span>
         </h3>
         <p id="partsOfAnXPath.xml-d1e213">
            <span class="xmldoc">&lt;mtx:cr xml:id=d1e213&gt;</span>XPath is perfectly capable of doing basic arithmetic on arbitrary 
        numbers. While XPath is much more useful for traversing and matching 
        XML nodes, if you ever have a burning desire to know what the modulo of 
        78914 by 8 is, just type <code id="partsOfAnXPath.xml-d1e215">
               <span class="xmldoc">&lt;mtx:fe xml:id=d1e215&gt;</span>78914 mod 8<span class="xmldoc">&lt;/mtx:fe&gt;</span>
            </code> into your XPath tool!<span class="xmldoc">&lt;/mtx:cr&gt;</span>
         </p>
         <span class="xmldoc">&lt;/mtx:ir&gt;</span>
      </div>
      <span class="xmldoc">&lt;/mtx:ti&gt;</span>
   </div>
  <div id="partsOfAnXPath.xml-d1e222">
      <span class="xmldoc">&lt;mtx:ti xml:id=d1e222&gt;</span>
      <h3 id="partsOfAnXPath.xml-d1e224">
         <span class="xmldoc">&lt;mtx:rh xml:id=d1e224&gt;</span>Functions<span class="xmldoc">&lt;/mtx:rh&gt;</span>
      </h3>
      <p id="partsOfAnXPath.xml-d1e227">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e227&gt;</span>Operators are a useful, but you may wish do apply more advanced methods 
      on your results. XPath comes with pre-defined functions which perform 
      specialized operations. Functions are structured like this: 
      <code id="partsOfAnXPath.xml-d1e229">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e229&gt;</span>FUNCTNAME(PARAMETER1,PARAM2)<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>. The function name usually 
      describes the action to be applied on any parameters. The number of 
      parameters themselves can range from 0 to 3+, depending on the function 
      used. And the result of the function can be anything from a line of text, 
      to a boolean value, to an ISO date-time value.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e233">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e233&gt;</span>What if we want to find <code id="partsOfAnXPath.xml-d1e235">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e235&gt;</span>&lt;author&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>s representing Ray 
      Bradbury, but we aren't sure if his name is typed out as "Bradbury, Ray" 
      or "Ray Bradbury"? If we are confident that there are no other authors 
      named "Bradbury" in our XML documents, we can search for 
      <code id="partsOfAnXPath.xml-d1e238">
            <span class="xmldoc">&lt;mtx:fe xml:id=d1e238&gt;</span>//author[contains(.,'Bradbury')]<span class="xmldoc">&lt;/mtx:fe&gt;</span>
         </code>, or "<span id="partsOfAnXPath.xml-d1e241" class="emph">
            <span class="xmldoc">&lt;mtx:pd xml:id=d1e241&gt;</span>Only those 
      <code id="partsOfAnXPath.xml-d1e243">
               <span class="xmldoc">&lt;mtx:fe xml:id=d1e243&gt;</span>&lt;author&gt;<span class="xmldoc">&lt;/mtx:fe&gt;</span>
            </code>s who have a (text) child containing the 
      word 'Bradbury'<span class="xmldoc">&lt;/mtx:pd&gt;</span>
         </span>".<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e248">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e248&gt;</span>All XPath 1.0 functions are listed <a href="functionsList.xml" id="partsOfAnXPath.xml-d1e250">
            <span class="xmldoc">&lt;mtx:zn xml:id=d1e250 au=functionsList.xml&gt;</span>here<span class="xmldoc">&lt;/mtx:zn&gt;</span>
         </a>. 
      The functions in XPath 2.0 are also especially useful. See the 
      <a href="http://www.w3schools.com/xpath/xpath_functions.asp"
            id="partsOfAnXPath.xml-d1e253">
            <span class="xmldoc">&lt;mtx:zn xml:id=d1e253 au=http://www.w3schools.com/xpath/xpath_functions.asp&gt;</span>awesome 
      and comprehensive list of functions<span class="xmldoc">&lt;/mtx:zn&gt;</span>
         </a> at W3Schools for the complete 
      list.<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <span class="xmldoc">&lt;/mtx:ti&gt;</span>
   </div>
  <div id="partsOfAnXPath.xml-d1e258">
      <span class="xmldoc">&lt;mtx:ti xml:id=d1e258&gt;</span>
      <h3 id="partsOfAnXPath.xml-d1e260">
         <span class="xmldoc">&lt;mtx:rh xml:id=d1e260&gt;</span>Putting It All Together<span class="xmldoc">&lt;/mtx:rh&gt;</span>
      </h3>
      <p id="partsOfAnXPath.xml-d1e263">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e263&gt;</span>That's about it! You now have the pieces you need to construct your own 
      XPaths. It's okay if it takes a while before building XPaths becomes 
      second nature. As you can see from the examples above, XPath is a 
      flexible and fairly forgiving language. Whenever you start expressing 
      your query, start small. Don't try to get the whole XPath written in one 
      go. Start with a single node test, and then add steps, axes, predicates, 
      comparisons, or functions one at a time. Break your query down into parts, 
      and assemble as you experiment!<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <p id="partsOfAnXPath.xml-d1e266">
         <span class="xmldoc">&lt;mtx:cr xml:id=d1e266&gt;</span>One last example. Using Xplorator's documents, let's try determining the 
      number of "code" elements within each paragraph. Here's one process for 
      constructing a query:<span class="xmldoc">&lt;/mtx:cr&gt;</span>
      </p>
      <div id="partsOfAnXPath.xml-d1e269">
         <span class="xmldoc">&lt;mtx:ne xml:id=d1e269&gt;</span>
         <ul>
            <li id="partsOfAnXPath.xml-d1e271">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e271&gt;</span>Get all code elements... <code id="partsOfAnXPath.xml-d1e273">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e273&gt;</span>//code<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e276">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e276&gt;</span>Count all code elements... <code id="partsOfAnXPath.xml-d1e278">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e278&gt;</span>count(//code)<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e281">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e281&gt;</span>Get all paragraph elements... <code id="partsOfAnXPath.xml-d1e283">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e283&gt;</span>//p<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e286">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e286&gt;</span>Get all paragraphs with at least one child named "code"... <code id="partsOfAnXPath.xml-d1e288">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e288&gt;</span>//p/code<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <ul>
            <li id="partsOfAnXPath.xml-d1e291">
               <span class="xmldoc">&lt;mtx:mn xml:id=d1e291&gt;</span>For each paragraph, count child codes... <code id="partsOfAnXPath.xml-d1e293">
                  <span class="xmldoc">&lt;mtx:fe xml:id=d1e293&gt;</span>//p/count(code)<span class="xmldoc">&lt;/mtx:fe&gt;</span>
               </code>
               <span class="xmldoc">&lt;/mtx:mn&gt;</span>
            </li>
         </ul>
         <span class="xmldoc">&lt;/mtx:ne&gt;</span>
      </div>
      <span class="xmldoc">&lt;/mtx:ti&gt;</span>
   </div>
  
  <div class="xmldoc" id="partsOfAnXPath.xml-d1e298">
      <span class="xmldoc">&lt;mtx:changelog xml:id=d1e298&gt;</span>
      <div class="xmldoc" id="partsOfAnXPath.xml-d1e300">
         <span class="xmldoc">&lt;mtx:change xml:id=d1e300 who=amc when=2015-06-07&gt;</span>
         <div id="partsOfAnXPath.xml-d1e302">
            <span class="xmldoc">&lt;mtx:ne xml:id=d1e302&gt;</span>
            <ul>
               <li id="partsOfAnXPath.xml-d1e304">
                  <span class="xmldoc">&lt;mtx:mn xml:id=d1e304&gt;</span>Added section on predicates.<span class="xmldoc">&lt;/mtx:mn&gt;</span>
               </li>
            </ul>
            <ul>
               <li id="partsOfAnXPath.xml-d1e307">
                  <span class="xmldoc">&lt;mtx:mn xml:id=d1e307&gt;</span>Added section on comparisons.<span class="xmldoc">&lt;/mtx:mn&gt;</span>
               </li>
            </ul>
            <ul>
               <li id="partsOfAnXPath.xml-d1e310">
                  <span class="xmldoc">&lt;mtx:mn xml:id=d1e310&gt;</span>Added section on functions.<span class="xmldoc">&lt;/mtx:mn&gt;</span>
               </li>
            </ul>
            <ul>
               <li id="partsOfAnXPath.xml-d1e313">
                  <span class="xmldoc">&lt;mtx:mn xml:id=d1e313&gt;</span>Added section "Putting It All Together".<span class="xmldoc">&lt;/mtx:mn&gt;</span>
               </li>
            </ul>
            <span class="xmldoc">&lt;/mtx:ne&gt;</span>
         </div>
         <span class="xmldoc">&lt;/mtx:change&gt;</span>
      </div>
      <div class="xmldoc" id="partsOfAnXPath.xml-d1e318">
         <span class="xmldoc">&lt;mtx:change xml:id=d1e318 who=amc when=2015-06-06&gt;</span>Created, added descriptions of steps, node tests and axes.<span class="xmldoc">&lt;/mtx:change&gt;</span>
      </div>
      <span class="xmldoc">&lt;/mtx:changelog&gt;</span>
   </div>
   <span class="xmldoc">&lt;/mtx:sc&gt;</span>
</body>
